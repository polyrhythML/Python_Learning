# Infinite loop
while True:
    print("its been a while ago")
    break


# Python doesnot have something called as do while loop
# Though it can be simulated
# While (some condition):
#           loop
# if (condition) : break

# break - jumps out of the closest enclosing loop
# continue - jumps out of the closest loop and move to the top the loop again
# pass - Does nothing at all empty statement holder

def func1():
    pass


def func2():
    pass


# Alternate way to achieve this ...
def func1():
    ...


def func2():
    ...


x = ...  # this is equivalent to none

print(x)
print(x)  # Outputs : Ellipsis (can read more about it online) ....

# Continue -> makes you jump to the top of the loop
# Python has no "go to" statement but because continue let's you jump about the in a program

found = False
"""
while x and not (found):
    if (match(x[0])):
        print('N')
        found = True
    else:
        x = x[1:]
    if not found:
        print("not found")
"""

# Note : Python assignments are statements not expressions
# while ((i = str(x)) != None) will give error

# For loops quicker to run than while
# To read files line by line , though, the for loop tends to be easiest to code and the quickest to run

# load whole file at once , into line string
"""
for line in open('test.txt').readlines(): ----- > This piece loads the whole file all at once 
    print(line.rstrip())
# Load 
for line in open('test.txt'):  ------> This piece uses iterator
    print(line.rstrip())
"""

""" 
Range - doesnot build result in memory all at once , this is space optimization , which is subsumed 
in 3.x by generator function

for i in range(len(X)): ---- > this runs slower and should only be used for in-place changes 
    print(X[i])
for x in X :            ----- >  this runs faster 
    print(x)
"""

# Parallel traversal

L1 = [1, 2, 3, 5, 6]
L2 = [3, 5, 7, 8, 9]
print(list(zip(L1, L2)))

# Most of the thing about for loops have already been covered


